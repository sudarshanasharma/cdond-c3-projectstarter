version: 2.1
orbs:
    node: circleci/node@4.0
    slack: circleci/slack@4.1.1
#    jq: circleci/jq@2.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files from the current S3 bucket
          command: |
            set TERM=xterm               
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name bestk-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name festk-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  write-envvars-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env vars to env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  
  
  revert-migration:
    description: Revert the last migration if smoke tests are failing in the current workflow
    steps:
      - checkout
      - write-envvars-file
      - run:
          when: on_fail
          name: Load migration status from https://memstash.io/ and revert migrations if necessary
          command: |
            DBMIGRATION_FLAG=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_completion)
            echo ${DBMIGRATION_FLAG}
            if [[ ${DBMIGRATION_FLAG} == 1 ]]
            then
              cd backend
              npm i
              npm run migrations:revert
            fi         

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm run clean
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1

   
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - run:
           name: Front-end test
           command: |
             cd ~/project/frontend
             npm install
             npm i jest-junit
             npm run test -- --reporters=default --reporters=jest-junit
           environment:
             JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
       - store_test_results:
           path: /tmp/reports/junit/
       - slack/notify:
          event: fail
          template: basic_fail_1
  
  test-backend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
     - checkout
     - run:
          name: Back-end test
          command: |
             cd ~/project/backend
             npm i jest-junit
             npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
     - store_test_results:
           path: /tmp/reports/junit/
     - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
      - checkout
      - run:
          name: Front-end scan
          command: |
              cd ~/project/frontend
              npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
      
  scan-backend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
      - checkout
      - run:
          name: Back-end scan
          command: |
              cd ~/project/backend
              npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
     docker:
     - image: amazon/aws-cli
     steps:
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists	
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name bestk-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  	
      - run:
          name: Ensure front-end infrastructure exist	
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name festk-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  	
      - run:
          name: Add back-end ip to ansible inventory	
          command: |
            echo -e "[all]\n" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
           root: ~/project
           paths:
              - ./.circleci/ansible/inventory.txt 
      - destroy-environment
 
  configure-infrastructure:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4b:b1:46:26:19:82:2a:5a:6e:f1:02:c0:ef:09:db:fd"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - attach_workspace:
          at: ~/project
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
          
      - destroy-environment
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
 
 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - write-envvars-file      
      - run:
          name: Run migrations and save status to https://memstash.io/
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm run migrations > migrations.txt            
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}"  --request PUT \
              --data $( grep -c "No migrations are pending" migrations.txt ) \
              https://api.memstash.io/values/migration_completion
            cat migrations.txt
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl jq
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["4b:b1:46:26:19:82:2a:5a:6e:f1:02:c0:ef:09:db:fd"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 .circleci/ansible/inventory.txt)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"
      - run:
          name: "Baking backend API_URL into the frontend"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive  
      - revert-migration
      - destroy-environment
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1



  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["4b:b1:46:26:19:82:2a:5a:6e:f1:02:c0:ef:09:db:fd"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
        #  no_output_timeout: 30m  
      - revert-migration      
      - destroy-environment
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
      
  smoke-test:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip nodejs npm curl jq
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["4b:b1:46:26:19:82:2a:5a:6e:f1:02:c0:ef:09:db:fd"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicDnsName]" --output text)
            echo "Backend IP: ${BACKEND_IP}"      
            EC2_URL="https://${BACKEND_IP}:3030/api/status"
            echo ${EC2_URL}
            curl ${EC2_URL}
            if curl -s ${EC2_URL} | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Smoke test frontend
          command: |
            pwd
            APP_URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employee"
            if curl -s ${APP_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migration
      - destroy-environment
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
      
    
  cloudfront-update:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
             # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
       - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID=12345
              export STACKS=[a,b,c] 
        - run:
            name: Remove old stacks and files
            command: |
            
             ## if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
             ## then
                # your code here
              ##fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: udapeople 
      - build-backend:
          context: udapeople
#      - test-frontend:
#          requires:
#              - build-frontend
#          context: udapeople 
#      - test-backend:
#          requires: 
#             - build-backend
#          context: udapeople 
      - scan-backend:
          requires: 
              - build-backend
          context: udapeople 
      - scan-frontend:
          requires: 
              - build-frontend
          context: udapeople 
      - deploy-infrastructure:
          requires: 
#              - test-frontend
#              - test-backend
              - scan-frontend
              - scan-backend
          filters:
            branches:
              only: 
                - non-prod
          context: udapeople 
      - configure-infrastructure:
          requires: 
              - deploy-infrastructure
          context: udapeople
      - run-migrations:
          requires: 
              - configure-infrastructure
          context: udapeople
      - deploy-frontend:
          requires: 
              - run-migrations
          context: udapeople
      - deploy-backend:
          requires: 
              - run-migrations
          context: udapeople
      - smoke-test:
          requires: 
              - deploy-backend
              - deploy-frontend
          context: udapeople
      - cloudfront-update:
          requires: 
              - smoke-test
#      - cleanup
