version: 2.1
orbs:
    node: circleci/node@4.0
    slack: circleci/slack@4.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files from the current S3 bucket
          command: |
            set TERM=xterm               
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name bestk-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name festk-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm run clean
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1

   
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - run:
           name: Front-end test
           command: |
             cd ~/project/frontend
             npm install
             npm i jest-junit
             npm run test -- --reporters=default --reporters=jest-junit
           environment:
             JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
       - store_test_results:
           path: /tmp/reports/junit/
       - slack/notify:
          event: fail
          template: basic_fail_1

     
      # Checkout code from git	
      # Restore from cache	
      # Your job code here	
  
  test-backend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
     - checkout
     - run:
          name: Back-end test
          command: |
             cd ~/project/backend
             npm i jest-junit
             npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
     - store_test_results:
           path: /tmp/reports/junit/
     - slack/notify:
          event: fail
          template: basic_fail_1

      # Checkout code from git	
      # Restore from cache	
      # Your job code here	
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
      - checkout
      - run:
          name: Front-end scan
          command: |
              cd ~/project/frontend
              npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Checkout code from git	
      # Restore from cache	
      # Your job code here	
      
  scan-backend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here	
    steps:
      - checkout
      - run:
          name: Back-end scan
          command: |
              cd ~/project/backend
              npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Checkout code from git	
      # Restore from cache	
      # Your job code here	
  deploy-infrastructure:
     docker:
     - image: amazon/aws-cli
#     - image: sudarshanas/awsplustar:0.0.1
#       auth:
#           username: sudarshanas
#           password: Palki@12345
      # Docker image here that supports AWS CLI	
     steps:
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists	
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name bestk-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  	
      - run:
          name: Ensure front-end infrastructure exist	
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name festk-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  	
      - run:
          name: Add back-end ip to ansible inventory	
          command: |
            echo -e "[all]\n" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
#             aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
#             aws cloudformation describe-stacks --stack-name festk-${CIRCLE_WORKFLOW_ID:0:7} --query Stacks[0].Outputs[].OutputValue --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
           root: ~/project
           paths:
              - ./.circleci/ansible/inventory.txt
#     - persist_to_workspace:
#          root: .circleci/ansible
#          paths:
#           - inventory.txt	
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
     
 
  configure-infrastructure:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4b:b1:46:26:19:82:2a:5a:6e:f1:02:c0:ef:09:db:fd"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/project
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/main.yml
      - destroy-environment
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
   
  run-migrations:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS	
    steps:
      # Checkout code from git	
      - run:
          name: Run migrations	
          command: |
            # Your code here	
            exit 1	
      - run:
          name: Send migration results to memstash	
          command: |
            # Your code here
            exit 1	
     # Here's where you will add some code to rollback on failure      	

  deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI	
    steps:
      # Checkout code from git	
      - run:
          name: Install dependencies
          command: |
            # your code here	
      - run:
          name: Get backend url	
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"	
            echo "${API_URL}"	
      - run:
          name: Deploy frontend objects	
          command: |
          # your code here	
      # Here's where you will add some code to rollback on failure      	

  deploy-backend:
    docker:
     - image: circleci/node:13.8.0
     # Docker image here that supports Ansible	
    steps:
      # Checkout code from git	
      # Add ssh keys with fingerprint	
      # attach workspace	
      - run:
          name: Install dependencies
          command: |
            # your code here	
      - run:
          name: Deploy backend
          command: |
            # your code here	
      # Here's where you will add some code to rollback on failure  	

  smoke-test:
    docker:
     - image: circleci/node:13.8.0
      # Lightweight Docker image 	
    steps:
      # Checkout code from git	
      - run:
          name: Install dependencies	
          command: |
          # your code here	
      - run:
          name: Get backend url	
          command: |
           # your code here	
      - run:
          name: Backend smoke test.	
          command: |
            # your code here	
      - run:
          name: Frontend smoke test.	
          command: |
            # your code here	
      # Here's where you will add some code to rollback on failure  	
  
  cloudfront-update:
    docker:
     - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
             # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
       - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID=12345
              export STACKS=[a,b,c] 
        - run:
            name: Remove old stacks and files
            command: |
            
             ## if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
             ## then
                # your code here
              ##fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: udapeople 
      - build-backend:
          context: udapeople
#       - test-frontend:
#          requires:
#              - build-frontend
#          context: udapeople 
#      - test-backend:
#          requires: 
#             - build-backend
#          context: udapeople 
      - scan-backend:
          requires: 
              - build-backend
          context: udapeople 
      - scan-frontend:
          requires: 
              - build-frontend
          context: udapeople 
      - deploy-infrastructure:
          requires: 
 #             - test-frontend
 #             - test-backend
              - scan-frontend
              - scan-backend
          filters:
            branches:
              only: 
                - non-prod
          context: udapeople 
      - configure-infrastructure:
          requires: 
              - deploy-infrastructure
          context: udapeople
      - run-migrations:
          requires: 
              - configure-infrastructure
      - deploy-frontend:
          requires: 
              - run-migrations
      - deploy-backend:
          requires: 
              - run-migrations
      - smoke-test:
          requires: 
              - deploy-backend
              - deploy-frontend
      - cloudfront-update:
          requires: 
              - smoke-test
#      - cleanup
